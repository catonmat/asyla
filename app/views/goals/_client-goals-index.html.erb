<div class="grid">

  <div class="client-banner"><h1>Goals</h1></div>
  <%= render "goals/goals-dashboard" %>
  <div class="goals-notification-container">
    <div class="goal-notification">
    <div class="card-goal-icon"><i class="fas fa-tasks"></i></div>
    <p><span id="large-label">3</span> new appointments this week.</p>
    </div>

    <div class="goal-notification">
    <div class="card-goal-icon"><i class="fas fa-exclamation-circle"></i></div>
    <p><span id="large-label-red">0</span> missed appointments.</p>
    </div>
  </div>
  <div class="goals-appointment-container">
    <div class="goals-banner">
      <p>Upcoming Appointments</p>
    </div>
    <%= render "goals-next-five-card",  {tasks: @tasks, date: @date } %>
  </div>
  <%= render 'shared/client-controller' %>
  <canvas class="goal-canvas" id="progress-Employment" width="134" height="180"></canvas>
  <canvas class="goal-canvas" id="progress-Legal"></canvas>
  <canvas class="goal-canvas" id="progress-Medical"></canvas>
</div>

<script>
  const employment = document.getElementById('Employment');
  const legal = document.getElementById('Legal');
  const medical = document.getElementById('Medical');

  const employmentIcon = '<div class="card-goal-icon"><i class="fas fa-briefcase"></i></div>';
  const legalIcon = '<div class="card-goal-icon"><i class="fas fa-gavel"></i></div>';
  const medicalIcon = '<div class="card-goal-icon"><i class="fas fa-notes-medical"></i></div>';

  employment.insertAdjacentHTML("afterbegin", employmentIcon);
  legal.insertAdjacentHTML("afterbegin", legalIcon);
  medical.insertAdjacentHTML("afterbegin", medicalIcon);
</script>



<% unless current_user.goals.blank? %>
  <script>
  // Function to calculate the radian from percentage
  const calcRadian = (percentage) => {
    if (percentage === 0.0) {
      console.log(`EMPTY: Value should be ZERO: ${percentage}`);
      return -1.57 // Value to set start of arc at 12 clock
    } else {
      let degree = percentage * 360;
      let radian = degree * 0.0174533;
      // console.log(radian);
      radian = radian - 1.57 // Value to set start of arc at 12 clock
      return radian
    }
  };

  // Select the Card Goals Element
  const goalCard = document.querySelector('.card-goal');
  const cardIcon = document.querySelector('.card-goal-icon');
  // Fetch height of the card-goals container and set the Y axis center
  let yPos = goalCard.offsetHeight / 2;
  // Fetch width of the card-goals container and set the X axis center
  let xPos = goalCard.offsetWidth / 2;
  // Fetch the width of the card-goal-icon and divide by two to get radius
  const radius = cardIcon.clientWidth / 2

  // Calculate the relevant margins to the canvas to shift up
  const offset1 = goalCard.offsetTop;
  const offset2 = cardIcon.offsetTop;
  const offset = offset2 - offset1 -7; // negative value subtracted from offset is the padding-top for card-goal element

  //Set the canvas size
  document.querySelectorAll('.goal-canvas').forEach((canvas) => {
    canvas.setAttribute("width", `${goalCard.clientWidth}`);
    canvas.setAttribute("height", `${goalCard.clientHeight}`);
    canvas.setAttribute("style", `top: -${offset}px`)
  });


  // // Apply positioning to card 1
  // var canvasEmployment = document.getElementById("progress-Employment");
  // var ctx1 = canvasEmployment.getContext("2d");
  // ctx1.beginPath();
  // ctx1.lineWidth = 6;
  // ctx1.strokeStyle = "#00a699";
  // console.log(parseFloat(`<%= @dashboard[0][:progress] %>`))
  // ctx1.arc(xPos,yPos,radius,-1.57,calcRadian(<%= @dashboard[0][:progress] %>)); //To start circle @ 12 clock, use -1.57 for start point of arc.
  // ctx1.stroke();

  // // Apply positioning to card 2
  // var canvasLegal = document.getElementById("progress-Legal");
  // var ctx2 = canvasLegal.getContext("2d");
  // ctx2.beginPath();
  // ctx2.lineWidth = 6;
  // ctx2.strokeStyle = "#00a699";
  // console.log(parseFloat(`<%= @dashboard[1][:progress] %>`))
  // ctx2.arc(xPos,yPos,radius,-1.57,calcRadian(<%= @dashboard[1][:progress]%>)); //To start circle @ 12 clock, use -1.57 for start point of arc.
  // ctx2.stroke();

  // // Apply positioning to card 3
  // var canvasLegal = document.getElementById("progress-Medical");
  // var ctx3 = canvasLegal.getContext("2d");
  // ctx3.beginPath();
  // ctx3.lineWidth = 6;
  // ctx3.strokeStyle = "#00a699";
  // console.log(parseFloat(`<%= @dashboard[2][:progress] %>`))
  // ctx3.arc(xPos,yPos,radius,-1.57,calcRadian(<%= @dashboard[2][:progress] %>)); //To start circle @ 12 clock, use -1.57 for start point of arc.
  // ctx3.stroke();




  // TEMPORARY CODE: Attemptto dynamically draw progress charts
  let interval;

  const setUpCanvas = (actualPercentage, id) => {
    var canvasEmployment = document.getElementById(id);
    var ctx = canvasEmployment.getContext("2d");
    ctx.beginPath();
    ctx.lineWidth = 6;
    ctx.strokeStyle = "#00a699";
    ctx.arc(xPos,yPos,radius,-1.57,-1.57); //To start circle @ 12 clock, use -1.57 for start point of arc.
    ctx.stroke();
    let percentage = 0.01;
    interval = setTimeout(function(){increment(actualPercentage, ctx, percentage)}, 100);
  }


  const increment = (actualPercentage, ctx, percentage) => {
    // console.log(actualPercentage);
    if (percentage >= actualPercentage) {
      console.log('done');
    } else {

      percentage = percentage + 0.01;
      let radian = calcRadian(percentage);
      ctx.beginPath();
      ctx.arc(xPos,yPos,radius,-1.57, radian);
      ctx.stroke();

      setTimeout(function(){increment(actualPercentage, ctx, percentage)}, 10);
      // console.log(percentage)
    }
  }

  const move = (canvas) => {
    const startTime = performance.now();

  // select all the canvas at the same time. DONE
  // when the page loads, run FUNCTION1.DONE
    if (canvas.id === 'progress-Employment') {
        console.log('employment');
        let actualPercentage = parseFloat(`<%= @dashboard[0][:progress] %>`);
        setUpCanvas(actualPercentage, 'progress-Employment');
    }  else if (canvas.id === 'progress-Legal') {
        console.log('legal');
        let actualPercentage = parseFloat(`<%= @dashboard[1][:progress] %>`);
        setUpCanvas(actualPercentage, 'progress-Legal');
    } else if (canvas.id === 'progress-Medical') {
        console.log('medical')
        let actualPercentage = parseFloat(`<%= @dashboard[2][:progress] %>`);
        setUpCanvas(actualPercentage, 'progress-Medical');
   }


    const duration = performance.now() - startTime;
    console.log(`someMethodIThinkMightBeSlow took ${duration}ms`);
  // FUNCTION1 must set the inital arc end point at 0, then increment it by 1 until it reaches the actual state of progress for that goal
    // run a command that will increase the input into calc radian as 1
    // the command then updaes the ctx1 arc command
    // the % will increas by another 1
    // the command then updates the ctx1 arc command
    // when the % reaches the actual goal progress %, the code will stop
  };

  document.querySelectorAll('.goal-canvas').forEach((canvas) => {
    canvas.addEventListener("load", move(canvas));
  });
  </script>
<% end %>































